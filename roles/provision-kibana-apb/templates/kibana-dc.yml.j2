apiVersion: v1
kind: DeploymentConfig
metadata:
  labels:
    app: {{ APPLICATION_NAME }}
  name: {{ APPLICATION_NAME }}
  namespace: {{ namespace }}
spec:
  replicas: 1
  selector:
    app: {{ APPLICATION_NAME }}
  template:
    metadata:
      labels:
        app: {{ APPLICATION_NAME }}
    spec:
      containers:
{% if SECURE %}
      - name: oauth-proxy
        image: openshift/oauth-proxy:v1.0.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8443
          name: public
        args:
        - --https-address=:8443
        - --provider=openshift
        - --openshift-service-account={{ APPLICATION_NAME }}-proxy
        - --upstream=http://localhost:5601
        - --tls-cert=/etc/tls/private/tls.crt
        - --tls-key=/etc/tls/private/tls.key
        - --cookie-secret={{ lookup('password', '/tmp/secret chars=ascii_letters,digits') }}
        - --openshift-sar={"namespace":"{{ namespace }}","resource":"services","name":"{{ APPLICATION_NAME }}","verb":"get"}
        volumeMounts:
        - mountPath: /etc/tls/private
          name: proxy-tls
{% endif %}
      - image: ' '
        imagePullPolicy: IfNotPresent
        name: {{ APPLICATION_NAME }}
        resources:
          limits:
            memory: {{ KIBANA_MEMORY_LIMIT }}
          requests:
            memory: {{ KIBANA_MEMORY_LIMIT }}
{% if not SECURE %}
        ports:
        - containerPort: 5601
          protocol: TCP
{% endif %}
        resources: {}
        volumeMounts:
        - mountPath: /usr/share/kibana/data
          name: kibana-data
          subPath: data
        - mountPath: /usr/share/kibana/optimize
          name: kibana-data
          subPath: optimize
        - mountPath: /usr/share/kibana/config
          name: kibana-config
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
{% if SECURE %}
      serviceAccountName: {{ APPLICATION_NAME }}-proxy
{% endif %}
      terminationGracePeriodSeconds: 30
      volumes:
        - name: kibana-data
{% if _apb_plan_id == 'ephemeral' %}
          emptyDir: {}
{% else %}
          persistentVolumeClaim:
            claimName: {{ APPLICATION_NAME }}-claim
{% endif %}
        - configMap:
            name: {{ APPLICATION_NAME }}
          name: kibana-config
{% if SECURE %}
        - name: proxy-tls
          secret:
            secretName: {{ APPLICATION_NAME }}-proxy-tls
{% endif %}
  triggers:
  - type: ConfigChange
  - imageChangeParams:
      automatic: true
      containerNames:
      - kibana
      from:
        kind: ImageStreamTag
        name: {{ APPLICATION_NAME }}:{{ kibana_version }}
        namespace: {{ namespace }}
    type: ImageChange
